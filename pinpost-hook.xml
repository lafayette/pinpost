<?xml version="1.0" encoding="utf-8"?>
<hookexport>
  <hookdata>
	<config>
	  <hook_name>PinPost</hook_name>
	  <hook_desc>Прикрепление сообщений в темах форума.</hook_desc>
	  <hook_author>Evgeniy Goryuchkin</hook_author>
	  <hook_email>goryuchkin@gmail.com</hook_email>
	  <hook_website>http://forum.pskovonline.ru/</hook_website>
	  <hook_update_check/>
	  <hook_requirements><![CDATA[a:3:{s:21:"required_applications";a:1:{s:4:"core";a:3:{s:8:"app_name";s:14:"Система";s:11:"min_version";i:30011;s:11:"max_version";i:0;}}s:20:"hook_php_version_min";s:0:"";s:20:"hook_php_version_max";s:0:"";}]]></hook_requirements>
	  <hook_version_human>0.2</hook_version_human>
	  <hook_version_long>2</hook_version_long>
	  <hook_extra_data><![CDATA[a:2:{s:7:"display";N;s:9:"templates";a:1:{s:10:"skin_topic";a:1:{s:0:"";s:24:"hookPinposts__modOptions";}}}]]></hook_extra_data>
	  <hook_key>pinpost</hook_key>
	  <hook_global_caches/>
	</config>
  </hookdata>
  <hookfiles>
	<file>
	  <hook_file_real>PinpostsTopicSkin.php</hook_file_real>
	  <hook_type>skinHooks</hook_type>
	  <hook_classname>PinpostsTopicSkin</hook_classname>
	  <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:10:"skin_topic";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
	  <hooks_source><![CDATA[
class PinpostsTopicSkin extends skin_topic(~id~) {
	/**
	 * @param array $forum
	 * @param array $topic
	 * @param array $post_data
	 * @param array $displayData
	 *
	 * @return string
	 */
	public function topicViewTemplate($forum, $topic, $post_data, $displayData) {
		$hooksCache = ipsRegistry::cache()->getCache('hooks');
		$topicHook = null;
		foreach ($hooksCache['libraryHooks'] as $libraryHooks) {
			if (isset($libraryHooks['public_forums_forums_topics'])) {
				$topicHook = end($libraryHooks['public_forums_forums_topics']);
			}
		}
		if ($topicHook != null) {
			require_once(IPS_HOOKS_PATH . $topicHook['filename']);
		}

		$settings = ipsRegistry::instance()->fetchSettings();
		
		$postIds = array_keys($post_data);
		
		// Инициализация хелпера.
		$topicsHelper = new TopicsHelper();
		$topicsHelper->helperInit();
		
		
		// Выборка закрепленных постов.
		$pids = $topicsHelper->getPinnedPids($topic['tid']);
		$pinnedPosts = $topicsHelper->getPostsById($pids);
		
		if (count($pinnedPosts) > 0) {
			$postCount = 1;
			
			foreach ($pinnedPosts as $pinnedPost) {
				if (in_array($pinnedPost['post']['pid'], $postIds)) {
					// Если пост уже в массиве, то удаляем его.
					unset($post_data[$pinnedPost['post']['pid']]);
				}
				
				// $pinnedPost['post']['post_count'] = 1; // TODO: count me $postCount++
			}
			
			// Ставим закрепленные посты перед основным списком.
			$post_data = $pinnedPosts + $post_data;
		}
		
		// Закрепление первых постов в заданных разделах.
		if (in_array($forum['id'], $settings['pin_topic_forums'])/* || $topic['pinned']*/) {
			$pinnedPost = $topicsHelper->getPostById($topic['topic_firstpost']);

			$pinnedPost['post']['post_count'] = 1;
			$pinnedPost['post']['_adCode'] = '<div style="background: #EBF0F3; height: 2em; padding: 0 2px; position: relative; right: 3px; width: 100%;"></div>';

			if ($pinnedPost != null) {
				if (in_array($pinnedPost['post']['pid'], $postIds)) {
					// Если пост уже в массиве, то удаляем его.
					unset($post_data[$pinnedPost['post']['pid']]);
				}

				// Ставим пост на первое место.
				$post_data = array($pinnedPost) + $post_data;
			}
		}

		return parent::topicViewTemplate($forum, $topic, $post_data, $displayData) . $this->hookPinposts__modOptions($displayData);
	}
}
]]></hooks_source>
	</file>
	<file>
	  <hook_file_real>TopicsHelper.php</hook_file_real>
	  <hook_type>libraryHooks</hook_type>
	  <hook_classname>TopicsHelper</hook_classname>
	  <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:1:"0";s:15:"classToOverload";s:27:"public_forums_forums_topics";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
	  <hooks_source><![CDATA[<?php

class TopicsHelper extends (~extends~) {
	public function helperInit() {
		$this->makeRegistryShortcuts(ipsRegistry::instance());
		$this->forumClass = $this->registry->getClass('class_forums');
	}
	
	public function getPinnedPids($topic_id) {
		$this->DB->build(array(
    		'select' => 'p.pid',
			'from' => array('posts' => 'p'),
			'where' => '(p.topic_id = ' . intval($topic_id) . ') AND (p.pinposts_pinned > 0)',
			// 'order' => $this->settings['post_order_column'] . ' ' . $this->settings['post_order_sort'],
		));

		$oq = $this->DB->execute();

		if (!$this->DB->getTotalRows()) {
			return array();
		}
		
		$pids = array();
		while ($row = $this->DB->fetch($oq)) {
			$pids[] = intval($row['pid']);
		}
		
		return $pids;
	}

	// $pid - int
	public function getPostById($pid) {
		$posts = $this->getPostsById(array($pid));
		if (is_array($posts) && count($posts) > 0) {
			return $posts[$pid];
		} else {
			return null;
		}
	}

	// $pids - array of int
	public function getPostsById($pids) {
		if (count($pids) < 1) {
			return array();
		}
		
		/* Data Hook Location */
		$dataHook = array( 'members' => array(), 'postJoins' => array() );
		IPSLib::doDataHooks( $dataHook , 'topicViewQuery' );
		
		//-----------------------------------------
		// Joins
		//-----------------------------------------		
		
		$_extraMember = ( is_array($dataHook['members']) && count($dataHook['members']) ) ? ',m.'.implode(',m.', $dataHook['members']) : '';
		
		$_post_joins = array(
								array( 
										'select' => 'm.member_id as mid,m.name,m.member_group_id,m.email,m.joined,m.posts, m.last_visit, m.last_activity,m.login_anonymous,m.title as member_title, m.warn_level, m.warn_lastwarn, m.members_display_name, m.members_seo_name, m.has_gallery, m.has_blog, m.members_bitoptions,m.mgroup_others'.$_extraMember,
										'from'   => array( 'members' => 'm' ),
										'where'  => 'm.member_id=p.author_id',
										'type'   => 'left'
									),
								array( 
										'select' => 'pp.*',
										'from'   => array( 'profile_portal' => 'pp' ),
										'where'  => 'm.member_id=pp.pp_member_id',
										'type'   => 'left'
								)
							);
		
		/* Add data hook joins */					
		if ( is_array($dataHook['postJoins']) && count($dataHook['postJoins']) )
		{
			$_post_joins = array_merge( $_post_joins, $dataHook['postJoins'] );
		}
		
		/* Add custom fields join? */
		if( $this->settings['custom_profile_topic'] == 1 )
		{
			$_post_joins[] = array( 
									'select' => 'pc.*',
									'from'   => array( 'pfields_content' => 'pc' ),
									'where'  => 'pc.member_id=p.author_id',
									'type'   => 'left'
								);
		}							
		
		/* Reputation system enabled? */
		if( $this->settings['reputation_enabled'] )
		{
			/* Add the join to figure out if the user has already rated the post */
			$_post_joins[] = $this->registry->repCache->getUserHasRatedJoin( 'pid', 'p.pid', 'forums' );
			
			/* Add the join to figure out the total ratings for each post */
			if( $this->settings['reputation_show_content'] )
			{
				$_post_joins[] = $this->registry->repCache->getTotalRatingJoin( 'pid', 'p.pid', 'forums' );
			}
		}
		
		/* Cache? */
		if ( IPSContentCache::isEnabled() )
		{
			if ( IPSContentCache::fetchSettingValue('post') )
			{
				$_post_joins[] = IPSContentCache::join( 'post', 'p.pid' );
			}
			
			if ( IPSContentCache::fetchSettingValue('sig') )
			{
				$_post_joins[] = IPSContentCache::join( 'sig' , 'm.member_id', 'ccb', 'left', 'ccb.cache_content as cache_content_sig, ccb.cache_updated as cache_updated_sig' );
			}
		}
		
		/* Ignored Users */
		$ignored_users = array();
		
		foreach( $this->member->ignored_users as $_i )
		{
			if( $_i['ignore_topics'] )
			{
				$ignored_users[] = $_i['ignore_ignore_id'];
			}
		}
		
		//-----------------------------------------
		// Get posts
		//-----------------------------------------

		$this->DB->build( array( 'select'   => 'p.*',
								 'from'	    => array( 'posts' => 'p' ),
								 'where'    => "p.pid IN(" . implode( ',', $pids ) . ")",
								 'order'    => $this->settings['post_order_column'] . ' ' . $this->settings['post_order_sort'],
								 'add_join' => $_post_joins )	);

		$oq = $this->DB->execute();

		if ( ! $this->DB->getTotalRows() )
		{
			return array();
		}

		//-----------------------------------------
		// Format and print out the topic list
		//-----------------------------------------
		
		$adCodeSet = false;
		$post_data = array();

		while ( $row = $this->DB->fetch( $oq ) )
		{
			$row['member_id']	= $row['mid'];

			$_data = $this->parsePostRow( $row );
			
			$post_data[ $_data['post'] ['pid'] ] = $_data;

			//-----------------------------------------
			// Are we giving this bloke a good ignoring?
			//-----------------------------------------
			
			$post_data[ $row['pid'] ]['post']['_ignored']	= 0;

			if ( isset( $ignored_users ) && is_array( $ignored_users ) && count( $ignored_users ) )
			{
				if( in_array( $post_data[ $row['pid'] ]['author']['member_id'], $ignored_users ) )
				{
					if ( ! strstr( $this->settings['cannot_ignore_groups'], ','.$post_data[ $row['pid'] ]['post']['member_group_id'].',' ) )
					{
						$post_data[ $row['pid'] ]['post']['_ignored'] = 1;
						continue;
					}
				}
			}
			
			/* AD Code */
			$post_data[ $row['pid'] ]['post']['_adCode']	= '';

			if ( $this->registry->getClass('IPSAdCode')->userCanViewAds() && ! $adCodeSet )
			{
				if ( $this->registry->getClass('IPSAdCode')->getAdCode('ad_code_topic_view_code') )
				{
					$post_data[ $row['pid'] ]['post']['_adCode']	= $this->registry->getClass('IPSAdCode')->getAdCode('ad_code_topic_view_code');
					$adCodeSet										= true;
				}
			}
		}

		//-----------------------------------------
		// Print the footer
		//-----------------------------------------

		return $post_data;
	}
}

]]></hooks_source>
	</file>
	<file>
      <hook_file_real>PinpostsForumsModerateModerateAction.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>PinpostsForumsModerateModerateAction</hook_classname>
      <hook_data><![CDATA[a:6:{s:15:"classToOverload";s:31:"public_forums_moderate_moderate";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class PinpostsForumsModerateModerateAction extends (~extends~) {
    protected function _multiPostModify() {
        $this->pids  = $this->_getIds('selectedpids', 'selectedpidsJS');

        if (count($this->pids)) {
            switch ($this->request['tact']) {
                case 'pinposts_pin':
                    $this->pinpostsPinPosts(true);
                break;
                case 'pinposts_unpin':
                    $this->pinpostsPinPosts(false);
                break;
            }
        }

        parent::_multiPostModify();
    }

    private function pinpostsPinPosts($pin) {
        $pin = (bool) $pin;

        // Проверка прав
        $permission = $pin ? 'pin_topic' : 'unpin_topic';
        $this->_resetModerator($this->topic['forum_id']);
        $this->_genericPermissionCheck($permission);

        // Действие
        $sql = 'pinposts_pinned='.($pin ? 1 : 0);
        $this->DB->buildAndFetch(array(
            'update' => 'posts',
            'set'    => $sql,
            'where'  => "pid IN('".implode("','", $this->pids)."')",
            ));

        // Запись в лог
        $lang = $pin ? 'pinposts_mod_pinned' : 'pinposts_mod_unpinned';
        $this->_addModeratorLog(sprintf(
            $this->lang->words[$lang], implode(', ', $this->pids)));
    }
}]]></hooks_source>
    </file>
    <file>
      <hook_file_real>PinpostsForumsForumsModeratorAdminAction.php</hook_file_real>
      <hook_type>commandHooks</hook_type>
      <hook_classname>PinpostsForumsForumsModeratorAdminAction</hook_classname>
      <hook_data><![CDATA[a:6:{s:15:"classToOverload";s:29:"admin_forums_forums_moderator";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[<?php

class PinpostsForumsForumsModeratorAdminAction extends (~extends~) {
    /**
    * @see admin_forums_forums_moderator::modForm
    *
    * @param string $type
    */
    public function modForm($type='add') {
        $this->lang->words['frm_m_pin']   = $this->lang->words['pinposts_frm_m_pin'];
        $this->lang->words['frm_m_unpin'] = $this->lang->words['pinposts_frm_m_unpin'];

        return parent::modForm($type);
    }
}]]></hooks_source>
    </file>
  </hookfiles>
  <hookextras_settings/>
  <hookextras_language>
    <language>
      <word_app>forums</word_app>
      <word_pack>public_mod</word_pack>
      <word_key>pinposts_mod_pinned</word_key>
      <word_default>Сообщение(я) закреплены: %s.</word_default>
      <word_custom/>
      <word_js>0</word_js>
    </language>
    <language>
      <word_app>forums</word_app>
      <word_pack>public_mod</word_pack>
      <word_key>pinposts_mod_unpinned</word_key>
      <word_default>Сообщение(я) опущены: %s.</word_default>
      <word_custom/>
      <word_js>0</word_js>
    </language>
    <language>
      <word_app>forums</word_app>
      <word_pack>public_topic</word_pack>
      <word_key>pinposts_cpt_unpin</word_key>
      <word_default>Опустить сообщения</word_default>
      <word_custom/>
      <word_js>0</word_js>
    </language>
    <language>
      <word_app>forums</word_app>
      <word_pack>public_topic</word_pack>
      <word_key>pinposts_cpt_pin</word_key>
      <word_default>Закрепить сообщения</word_default>
      <word_custom/>
      <word_js>0</word_js>
    </language>
    <language>
      <word_app>forums</word_app>
      <word_pack>admin_forums</word_pack>
      <word_key>pinposts_frm_m_pin</word_key>
      <word_default>Может закреплять темы/сообщения?</word_default>
      <word_custom/>
      <word_js>0</word_js>
    </language>
    <language>
      <word_app>forums</word_app>
      <word_pack>admin_forums</word_pack>
      <word_key>pinposts_frm_m_unpin</word_key>
      <word_default>Может опускать темы/сообщения?</word_default>
      <word_custom/>
      <word_js>0</word_js>
    </language>
  </hookextras_language>
  <hookextras_modules/>
  <hookextras_help/>
  <hookextras_templates>
    <templates>
      <template_set_id>0</template_set_id>
      <template_group>skin_topic</template_group>
      <template_content><![CDATA[<if test="$displayData['mod_links'] && $this->memberData['is_mod']">
<script type='text/javascript'>
    (function() {
        var selectElement = $('tact');
        selectElement.insert('<option value="pinposts_pin">{$this->lang->words['pinposts_cpt_pin']}</option>');
        selectElement.insert('<option value="pinposts_unpin">{$this->lang->words['pinposts_cpt_unpin']}</option>');
        selectElement.selectedIndex = 0;
    })();
</script>
</if>]]></template_content>
      <template_name>hookPinposts__modOptions</template_name>
      <template_data>$displayData</template_data>
      <template_updated>1258888608</template_updated>
      <template_removable>0</template_removable>
      <template_added_to>0</template_added_to>
      <template_user_added>0</template_user_added>
      <template_user_edited>0</template_user_edited>
      <template_set_type>master_skin</template_set_type>
    </templates>
  </hookextras_templates>
  <hookextras_css/>
  <hookextras_tasks/>
  <hookextras_database_create/>
  <hookextras_database_alter/>
  <hookextras_database_update/>
  <hookextras_database_insert/>
</hookexport>
